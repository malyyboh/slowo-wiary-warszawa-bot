package handlers

import (
	"context"
	"fmt"
	"log"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/malyyboh/slowo-wiary-warszawa-bot/internal/keyboards"
)

func AdminPanelHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	text := "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
	keyboard := keyboards.AdminPanelKeyboard()

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        text,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
		LinkPreviewOptions: &models.LinkPreviewOptions{
			IsDisabled: bot.True(),
		},
	})
}

func AdminCallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	data := callback.Data

	var text string
	var keyboard *models.InlineKeyboardMarkup

	switch data {
	case "admin_panel":
		text = "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
		keyboard = keyboards.AdminPanelKeyboard()

	case "admin_list_events":
		text = getAdminEventsListText()
		keyboard = keyboards.AdminEventsListKeyboard()

	case "admin_add_event":
		text = "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó</b>\n\n" +
			"–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.\n" +
			"–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º."
		keyboard = keyboards.BackToAdminPanelKeyboard()

	default:
		text = "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
		keyboard = keyboards.AdminPanelKeyboard()
	}

	if callback.Message.Message == nil {
		log.Printf("Error: callback message is nil")
		return
	}

	b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:      callback.Message.Message.Chat.ID,
		MessageID:   callback.Message.Message.ID,
		Text:        text,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
		LinkPreviewOptions: &models.LinkPreviewOptions{
			IsDisabled: bot.True(),
		},
	})

	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
	})
}

func getAdminEventsListText() string {
	events, err := eventRepo.GetAll()
	if err != nil {
		log.Printf("Error getting events: %v", err)
		return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
	}

	if len(events) == 0 {
		return "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π</b>\n\n–ü–æ–¥—ñ–π –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î."
	}

	text := "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π</b>\n\n"

	for i, event := range events {
		status := "‚úÖ"
		if !event.IsPublished {
			status = "üìù"
		}

		text += fmt.Sprintf(
			"%s <b>%d. %s</b>\n"+
				"üìÖ %s\n"+
				"ID: %d\n\n",
			status,
			i+1,
			event.Title,
			event.Date.Format("02.01.2006 15:04"),
			event.ID,
		)
	}

	text += "\nüí° ‚úÖ - –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ, üìù - —á–µ—Ä–Ω–µ—Ç–∫–∞"

	return text
}
